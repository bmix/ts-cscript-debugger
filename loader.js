"use strict";
// const htmlfile = WScript.CreateObject('htmlfile');
// htmlfile.write('<meta http-equiv="x-ua-compatible" content="IE=9" />');
// // @ts-ignore
// JSON = htmlfile.parentWindow.JSON;
// htmlfile.close();
var fso = new ActiveXObject('Scripting.FileSystemObject');
var collectionToArray = function (col) {
    var results = [];
    var enumerator = new Enumerator(col);
    enumerator.moveFirst();
    while (!enumerator.atEnd()) {
        results.push(enumerator.item());
        enumerator.moveNext();
    }
    return results;
};
var isAbsolutePath = function (s) { return /^[A-Za-z]:/i.test(s); };
var shellExec = function (command, cwd, stream) {
    WScript.Echo("-- Command: " + command);
    WScript.Echo("-- CWD: " + cwd);
    var shell = new ActiveXObject('WScript.Shell');
    if (cwd) {
        shell.CurrentDirectory = cwd;
    }
    var exec = shell.Exec(command);
    while (exec.Status === 0) {
        WScript.Sleep(100);
        while (!exec.StdOut.AtEndOfStream) {
            var nextString = exec.StdOut.ReadAll();
            if (stream) {
                stream.stdout = (stream.stdout || '') + nextString;
            }
            WScript.StdOut.Write(nextString);
        }
    }
};
var args = collectionToArray(WScript.Arguments);
if (args.length === 0) {
    throw new Error('No file to compile and debug');
}
var file = args[0];
if (!isAbsolutePath(file)) {
    file = fso.GetAbsolutePathName(args[0]); // depends on the current working folder being set properly
}
if (!fso.FileExists(file)) {
    throw new Error("Can't find file: " + args[0] + " at location " + file);
}
var tsconfigPath = '';
var parent = file;
do {
    parent = fso.GetParentFolderName(parent);
    var testPath = fso.BuildPath(parent, 'tsconfig.json');
    if (fso.FileExists(testPath)) {
        tsconfigPath = testPath;
    }
} while (!tsconfigPath && parent);
if (!tsconfigPath) {
    throw new Error("Unable to find tsconfig.json for file '" + WScript.ScriptFullName + "'");
}
var outfolderPath = fso.BuildPath(fso.GetParentFolderName(WScript.ScriptFullName), 'out');
if (fso.FolderExists(outfolderPath)) {
    fso.DeleteFolder(outfolderPath, true);
}
try {
    fso.CreateFolder(outfolderPath);
}
catch (_a) {
    WScript.Sleep(100);
    fso.CreateFolder(outfolderPath); // sometimes works on the second attempt
}
var tsconfigFolder = fso.GetParentFolderName(tsconfigPath);
var stream = {};
shellExec('tsc.cmd --noEmit --listFiles', tsconfigFolder, stream);
if (!(stream.stdout)) {
    throw new Error('No emitted files');
}
var scriptFolder = fso.GetParentFolderName(WScript.ScriptFullName);
var outFile = fso.BuildPath(outfolderPath, fso.GetBaseName(file) + '.js');
var files = [
    fso.BuildPath(scriptFolder, 'node_modules\\es5-shim\\es5-shim.js').replace(/\\/g, '\\\\'),
    fso.BuildPath(scriptFolder, 'node_modules\\activex-helpers\\activex-js-helpers.js').replace(/\\/g, '\\\\')
];
for (var _i = 0, _b = stream.stdout.split('\r\n'); _i < _b.length; _i++) {
    var inputFile = _b[_i];
    if (!inputFile) {
        continue;
    }
    if (inputFile.indexOf('/AppData/Roaming/npm/node_modules/typescript/lib/') !== -1) {
        continue;
    }
    files.push(inputFile.replace(/\\/g, '\\\\'));
}
var tsconfig = "{\n    \"compilerOptions\": {\n        \"outFile\": \"" + outFile.replace(/\\/g, '\\\\') + "\",\n        \"listEmittedFiles\": true,\n        \"noEmit\": false,\n        \"module\": \"system\",\n        \"allowJs\": true,\n        \"checkJs\": false,\n        \"inlineSourceMap\": true,\n        \"inlineSources\": true\n    },\n    \"extends\": \"" + tsconfigPath.replace(/\\/g, '\\\\') + "\",\n    \"files\": [\"" + files.join('","') + "\"]\n}";
var txt = fso.CreateTextFile(fso.BuildPath(outfolderPath, 'tsconfig.json'), true, true);
txt.Write(tsconfig);
txt.Close();
txt = undefined;
shellExec("tsc.cmd -p tsconfig.json --outFile \"" + outFile + "\"", outfolderPath);
shellExec("cscript.exe //x //d " + outFile, tsconfigFolder);
//# sourceMappingURL=data:application/json;base64,